{"version":3,"file":"tooltip.js","sources":["../../popper/src/utils/isFunction.js","../src/index.js"],"sourcesContent":["/**\n * Check if the given variable is a function\n * @method\n * @memberof Popper.Utils\n * @argument {Any} functionToCheck - variable to check\n * @returns {Boolean} answer to: is a function?\n */\nexport default function isFunction(functionToCheck) {\n  const getType = {};\n  return (\n    functionToCheck &&\n    getType.toString.call(functionToCheck) === '[object Function]'\n  );\n}\n","import Popper from 'popper.js';\nimport isFunction from '../../popper/src/utils/isFunction';\n\nconst DEFAULT_OPTIONS = {\n  container: false,\n  delay: 0,\n  html: false,\n  placement: 'top',\n  title: '',\n  template:\n    '<div class=\"tooltip\" role=\"tooltip\"><div class=\"tooltip-arrow\"></div><div class=\"tooltip-inner\"></div></div>',\n  trigger: 'hover focus',\n  offset: 0,\n};\n\nexport default class Tooltip {\n  /**\n   * Create a new Tooltip.js instance\n   * @class Tooltip\n   * @param {HTMLElement} reference - The DOM node used as reference of the tooltip (it can be a jQuery element).\n   * @param {Object} options\n   * @param {String} options.placement=bottom\n   *      Placement of the popper accepted values: `top(-start, -end), right(-start, -end), bottom(-start, -end),\n   *      left(-start, -end)`\n   * @param {HTMLElement|String|false} options.container=false - Append the tooltip to a specific element.\n   * @param {Number|Object} options.delay=0\n   *      Delay showing and hiding the tooltip (ms) - does not apply to manual trigger type.\n   *      If a number is supplied, delay is applied to both hide/show.\n   *      Object structure is: `{ show: 500, hide: 100 }`\n   * @param {Boolean} options.html=false - Insert HTML into the tooltip. If false, the content will inserted with `innerText`.\n   * @param {String|PlacementFunction} options.placement='top' - One of the allowed placements, or a function returning one of them.\n   * @param {String} [options.template='<div class=\"tooltip\" role=\"tooltip\"><div class=\"tooltip-arrow\"></div><div class=\"tooltip-inner\"></div></div>']\n   *      Base HTML to used when creating the tooltip.\n   *      The tooltip's `title` will be injected into the `.tooltip-inner` or `.tooltip__inner`.\n   *      `.tooltip-arrow` or `.tooltip__arrow` will become the tooltip's arrow.\n   *      The outermost wrapper element should have the `.tooltip` class.\n   * @param {String|HTMLElement|TitleFunction} options.title='' - Default title value if `title` attribute isn't present.\n   * @param {String} [options.trigger='hover focus']\n   *      How tooltip is triggered - click, hover, focus, manual.\n   *      You may pass multiple triggers; separate them with a space. `manual` cannot be combined with any other trigger.\n   * @param {HTMLElement} options.boundariesElement\n   *      The element used as boundaries for the tooltip. For more information refer to Popper.js'\n   *      [boundariesElement docs](https://popper.js.org/popper-documentation.html)\n   * @param {Number|String} options.offset=0 - Offset of the tooltip relative to its reference. For more information refer to Popper.js'\n   *      [offset docs](https://popper.js.org/popper-documentation.html)\n   * @param {Object} options.popperOptions={} - Popper options, will be passed directly to popper instance. For more information refer to Popper.js'\n   *      [options docs](https://popper.js.org/popper-documentation.html)\n   * @return {Object} instance - The generated tooltip instance\n   */\n  constructor(reference, options) {\n    // apply user options over default ones\n    options = { ...DEFAULT_OPTIONS, ...options };\n\n    reference.jquery && (reference = reference[0]);\n\n    // cache reference and options\n    this.reference = reference;\n    this.options = options;\n\n    // get events list\n    const events = typeof options.trigger === 'string'\n      ? options.trigger\n          .split(' ')\n          .filter(\n            trigger => ['click', 'hover', 'focus'].indexOf(trigger) !== -1\n          )\n      : [];\n\n    // set initial state\n    this._isOpen = false;\n\n    // set event listeners\n    this._setEventListeners(reference, events, options);\n  }\n\n  //\n  // Public methods\n  //\n\n  /**\n   * Reveals an element's tooltip. This is considered a \"manual\" triggering of the tooltip.\n   * Tooltips with zero-length titles are never displayed.\n   * @method Tooltip#show\n   * @memberof Tooltip\n   */\n  show = () => this._show(this.reference, this.options);\n\n  /**\n   * Hides an element’s tooltip. This is considered a “manual” triggering of the tooltip.\n   * @method Tooltip#hide\n   * @memberof Tooltip\n   */\n  hide = () => this._hide();\n\n  /**\n   * Hides and destroys an element’s tooltip.\n   * @method Tooltip#dispose\n   * @memberof Tooltip\n   */\n  dispose = () => this._dispose();\n\n  /**\n   * Toggles an element’s tooltip. This is considered a “manual” triggering of the tooltip.\n   * @method Tooltip#toggle\n   * @memberof Tooltip\n   */\n  toggle = () => {\n    if (this._isOpen) {\n      return this.hide();\n    } else {\n      return this.show();\n    }\n  };\n\n  //\n  // Defaults\n  //\n  arrowSelector = '.tooltip-arrow, .tooltip__arrow';\n  innerSelector = '.tooltip-inner, .tooltip__inner';\n\n  //\n  // Private methods\n  //\n\n  _events = [];\n\n  /**\n   * Creates a new tooltip node\n   * @memberof Tooltip\n   * @private\n   * @param {HTMLElement} reference\n   * @param {String} template\n   * @param {String|HTMLElement|TitleFunction} title\n   * @param {Boolean} allowHtml\n   * @return {HTMLelement} tooltipNode\n   */\n  _create(reference, template, title, allowHtml) {\n    // create tooltip element\n    const tooltipGenerator = window.document.createElement('div');\n    tooltipGenerator.innerHTML = template.trim();\n    const tooltipNode = tooltipGenerator.childNodes[0];\n\n    // add unique ID to our tooltip (needed for accessibility reasons)\n    tooltipNode.id = `tooltip_${Math.random().toString(36).substr(2, 10)}`;\n\n    // set initial `aria-hidden` state to `false` (it's visible!)\n    tooltipNode.setAttribute('aria-hidden', 'false');\n\n    // add title to tooltip\n    const titleNode = tooltipGenerator.querySelector(this.innerSelector);\n    if (title.nodeType === 1) {\n      // if title is a node, append it only if allowHtml is true\n      allowHtml && titleNode.appendChild(title);\n    } else if (isFunction(title)) {\n      // if title is a function, call it and set innerText or innerHtml depending by `allowHtml` value\n      const titleText = title.call(reference);\n      allowHtml\n        ? (titleNode.innerHTML = titleText)\n        : (titleNode.innerText = titleText);\n    } else {\n      // if it's just a simple text, set innerText or innerHtml depending by `allowHtml` value\n      allowHtml ? (titleNode.innerHTML = title) : (titleNode.innerText = title);\n    }\n\n    // return the generated tooltip node\n    return tooltipNode;\n  }\n\n  _show(reference, options) {\n    // don't show if it's already visible\n    if (this._isOpen) {\n      return this;\n    }\n    this._isOpen = true;\n\n    // if the tooltipNode already exists, just show it\n    if (this._tooltipNode) {\n      this._tooltipNode.style.display = '';\n      this._tooltipNode.setAttribute('aria-hidden', 'false');\n      this.popperInstance.update();\n      return this;\n    }\n\n    // get title\n    const title = reference.getAttribute('title') || options.title;\n\n    // don't show tooltip if no title is defined\n    if (!title) {\n      return this;\n    }\n\n    // create tooltip node\n    const tooltipNode = this._create(\n      reference,\n      options.template,\n      title,\n      options.html\n    );\n\n    // Add `aria-describedby` to our reference element for accessibility reasons\n    reference.setAttribute('aria-describedby', tooltipNode.id);\n\n    // append tooltip to container\n    const container = this._findContainer(options.container, reference);\n\n    this._append(tooltipNode, container);\n\n    const popperOptions = {\n      ...options.popperOptions,\n      placement: options.placement,\n    }\n\n    popperOptions.modifiers = {\n      ...popperOptions.modifiers,\n      arrow: {\n        element: this.arrowSelector,\n      },\n    }\n\n    if (options.boundariesElement) {\n      popperOptions.modifiers.preventOverflow = {\n        boundariesElement: options.boundariesElement,\n      };\n    }\n\n    this.popperInstance = new Popper(reference, tooltipNode, popperOptions);\n\n    this._tooltipNode = tooltipNode;\n\n    return this;\n  }\n\n  _hide(/*reference, options*/) {\n    // don't hide if it's already hidden\n    if (!this._isOpen) {\n      return this;\n    }\n\n    this._isOpen = false;\n\n    // hide tooltipNode\n    this._tooltipNode.style.display = 'none';\n    this._tooltipNode.setAttribute('aria-hidden', 'true');\n\n    return this;\n  }\n\n  _dispose() {\n    if (this._tooltipNode) {\n      this._hide();\n\n      // destroy instance\n      this.popperInstance.destroy();\n\n      // remove event listeners\n      this._events.forEach(({ func, event }) => {\n        this.reference.removeEventListener(event, func);\n      });\n      this._events = [];\n\n      // destroy tooltipNode\n      this._tooltipNode.parentNode.removeChild(this._tooltipNode);\n      this._tooltipNode = null;\n    }\n    return this;\n  }\n\n  _findContainer(container, reference) {\n    // if container is a query, get the relative element\n    if (typeof container === 'string') {\n      container = window.document.querySelector(container);\n    } else if (container === false) {\n      // if container is `false`, set it to reference parent\n      container = reference.parentNode;\n    }\n    return container;\n  }\n\n  /**\n   * Append tooltip to container\n   * @memberof Tooltip\n   * @private\n   * @param {HTMLElement} tooltip\n   * @param {HTMLElement|String|false} container\n   */\n  _append(tooltipNode, container) {\n    container.appendChild(tooltipNode);\n  }\n\n  _setEventListeners(reference, events, options) {\n    const directEvents = [];\n    const oppositeEvents = [];\n\n    events.forEach(event => {\n      switch (event) {\n        case 'hover':\n          directEvents.push('mouseenter');\n          oppositeEvents.push('mouseleave');\n          break;\n        case 'focus':\n          directEvents.push('focus');\n          oppositeEvents.push('blur');\n          break;\n        case 'click':\n          directEvents.push('click');\n          oppositeEvents.push('click');\n          break;\n      }\n    });\n\n    // schedule show tooltip\n    directEvents.forEach(event => {\n      const func = evt => {\n        if (this._isOpen === true) {\n          return;\n        }\n        evt.usedByTooltip = true;\n        this._scheduleShow(reference, options.delay, options, evt);\n      };\n      this._events.push({ event, func });\n      reference.addEventListener(event, func);\n    });\n\n    // schedule hide tooltip\n    oppositeEvents.forEach(event => {\n      const func = evt => {\n        if (evt.usedByTooltip === true) {\n          return;\n        }\n        this._scheduleHide(reference, options.delay, options, evt);\n      };\n      this._events.push({ event, func });\n      reference.addEventListener(event, func);\n    });\n  }\n\n  _scheduleShow(reference, delay, options /*, evt */) {\n    // defaults to 0\n    const computedDelay = (delay && delay.show) || delay || 0;\n    window.setTimeout(() => this._show(reference, options), computedDelay);\n  }\n\n  _scheduleHide(reference, delay, options, evt) {\n    // defaults to 0\n    const computedDelay = (delay && delay.hide) || delay || 0;\n    window.setTimeout(() => {\n      if (this._isOpen === false) {\n        return;\n      }\n      if (!document.body.contains(this._tooltipNode)) {\n        return;\n      }\n\n      // if we are hiding because of a mouseleave, we must check that the new\n      // reference isn't the tooltip, because in this case we don't want to hide it\n      if (evt.type === 'mouseleave') {\n        const isSet = this._setTooltipNodeEvent(evt, reference, delay, options);\n\n        // if we set the new event, don't hide the tooltip yet\n        // the new event will take care to hide it if necessary\n        if (isSet) {\n          return;\n        }\n      }\n\n      this._hide(reference, options);\n    }, computedDelay);\n  }\n\n  _setTooltipNodeEvent = (evt, reference, delay, options) => {\n    const relatedreference = evt.relatedreference || evt.toElement;\n\n    const callback = evt2 => {\n      const relatedreference2 = evt2.relatedreference || evt2.toElement;\n\n      // Remove event listener after call\n      this._tooltipNode.removeEventListener(evt.type, callback);\n\n      // If the new reference is not the reference element\n      if (!reference.contains(relatedreference2)) {\n        // Schedule to hide tooltip\n        this._scheduleHide(reference, options.delay, options, evt2);\n      }\n    };\n\n    if (this._tooltipNode.contains(relatedreference)) {\n      // listen to mouseleave on the tooltip element to be able to hide the tooltip\n      this._tooltipNode.addEventListener(evt.type, callback);\n      return true;\n    }\n\n    return false;\n  };\n}\n\n/**\n * Placement function, its context is the Tooltip instance.\n * @memberof Tooltip\n * @callback PlacementFunction\n * @param {HTMLElement} tooltip - tooltip DOM node.\n * @param {HTMLElement} reference - reference DOM node.\n * @return {String} placement - One of the allowed placement options.\n */\n\n/**\n * Title function, its context is the Tooltip instance.\n * @memberof Tooltip\n * @callback TitleFunction\n * @return {String} placement - The desired title.\n */\n"],"names":["isFunction","functionToCheck","getType","toString","call","DEFAULT_OPTIONS","Tooltip","reference","options","jquery","events","trigger","split","filter","indexOf","_isOpen","_setEventListeners","template","title","allowHtml","tooltipGenerator","window","document","createElement","innerHTML","trim","tooltipNode","childNodes","id","Math","random","substr","setAttribute","titleNode","querySelector","innerSelector","nodeType","appendChild","titleText","innerText","_tooltipNode","style","display","popperInstance","update","getAttribute","_create","html","container","_findContainer","_append","popperOptions","placement","modifiers","arrowSelector","boundariesElement","preventOverflow","Popper","_hide","destroy","_events","forEach","func","event","removeEventListener","parentNode","removeChild","directEvents","oppositeEvents","push","evt","usedByTooltip","_scheduleShow","delay","addEventListener","_scheduleHide","computedDelay","show","setTimeout","_show","hide","body","contains","type","isSet","_setTooltipNodeEvent","dispose","_dispose","toggle","relatedreference","toElement","callback","evt2","relatedreference2"],"mappings":"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"}